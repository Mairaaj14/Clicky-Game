{"version":3,"sources":["components/Wrapper.js","components/CharacterCard/index.js","components/Header.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","CharacterCard","alt","name","src","image","onClick","shuffleCards","id","Header","Navbar","href","class","headTitle","currentScore","topScore","App","state","characters","clicked","titleClass","_this","sort","Math","random","newScore","includes","clickedReset","concat","Object","toConsumableArray","newTopScore","setState","_this2","this","components_Wrapper","components_Navbar","components_Header","map","character","components_CharacterCard","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.14632635.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Wrapper(props) {\n    return (\n         <div className={props.className} > {props.children}</div>\n    )\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport \"./index.css\";\n\nfunction CharacterCard(props) {\n    return (\n        <div>\n            <div>\n               <img alt={props.name} \n               src={props.image}\n               onClick={() => props.shuffleCards(props.id)}\n               className=\"click-item\"\n               />\n            </div>\n        </div>\n    );\n}\n\n\n\n\nexport default CharacterCard;","import React from 'react';\n\n\nfunction Header(props) {\n    return (\n        <header className=\"header\"><h1>Dragon Ball Z's Clicky Game</h1>\n        <h2>Click on an image to start earning points, but don't click an image more than ONCE!</h2>\n        \n        </header>\n    )\n}\nexport default Header;\n","import React from 'react';\n\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar\">\n        <ul>\n            <li className=\"brand\"><a href=\"/\">Dragon Ball Z Memory Game</a></li>\n            <li class={props}>{props.headTitle}</li>\n            <li> Score {props.currentScore} | Top Score {props.topScore}</li>\n\n        </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Header from \"./components/Header\";\nimport characters from \"./characters.json\";\nimport Navbar from \"./components/Navbar\";\nimport './App.css';\n\n\n\nclass App extends Component {\n  //Setting the state \n  state = {\n    characters,\n    clicked: [],\n    currentScore: 0,\n    topScore: 0,\n    titleClass: \"\",\n    headTitle: \"Click an Image to Start!\"\n  \n  };\n// Set the cards to shuffle\n  shuffleCards = id => {\n    const charactersRandom = arr => arr.sort(() => Math.random() - 0.5)\n\n    const characters = charactersRandom(this.state.characters);\n\n    const newScore = this.state.clicked.includes(id) ? 0 : this.state.currentScore + 1\n\n    const clickedReset = newScore === 0 ? [] : [...this.state.clicked, id]\n\n    const newTopScore = this.state.topScore < newScore ? newScore : this.state.topScore\n\n    this.setState({\n      characters,\n      clicked: clickedReset,\n      currentScore: newScore,\n      topScore: newTopScore\n    });\n\n    if (newScore  === 0) {\n      this.setState({\n        headTitle: \"Guessed Incorrectly! Play Again!\",\n      })\n\n    } else {\n      this.setState({\n        headTitle: \"You guessed Correctly! Keep Clicking! \"\n      })\n    }\n\n  }\n//   componentDidMount() {\n//     this.setState({characters: this.shuffle(this.state.characters)})\n//   };\n// // Set the cards to shuffle\n//   shuffle = data => {\n//     for (let i = data.length - 1; i > 0; i --) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [data[i], data[j]] = [data[j], data[i]];\n//     }\n//     return data;\n  \n\n  render() \n  {\n    return (\n      <Wrapper>\n        <Navbar\n        currentScore={this.state.currentScore}\n        topScore={this.state.topScore}\n        headTitle={this.state.headTitle}\n        ></Navbar>\n        <Header></Header>\n        <Wrapper className = \"container\">\n        {this.state.characters.map(character => (\n          <CharacterCard\n          shuffleCards={this.shuffleCards}\n          id={character.id}\n          key={character.id}\n          name={character.name}\n          image={character.image}\n          currentScore={this.state.currentScore}\n          />\n        ))}\n\n          </Wrapper>\n      </Wrapper>\n    )\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}